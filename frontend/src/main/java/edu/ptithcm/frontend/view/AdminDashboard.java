package edu.ptithcm.frontend.view;

import edu.ptithcm.frontend.controller.AdminController;
import edu.ptithcm.frontend.protocols.DTTP;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.List;
import java.util.Map;

public class AdminDashboard extends JFrame {

    private final AdminController controller;
    private final JTabbedPane tabs;

    // Kh√°ch h√†ng
    private final DefaultTableModel customerModel;
    private final JTable customerTable;

    // Nh√¢n vi√™n
    private final DefaultTableModel employeeModel;
    private final JTable employeeTable;

    // S·∫£n ph·∫©m
    private final DefaultTableModel productModel;
    private final JTable productTable;

    // Log
    private final JTextArea logArea;

    public AdminDashboard(DTTP client) {
        super("Qu·∫£n l√Ω B√°n h√†ng - Admin");
        this.controller = new AdminController(this, client);

        // Kh·ªüi t·∫°o Model v√† Table Kh√°ch h√†ng
        String[] customerColumns = {"M√£ KH", "T√™n kh√°ch h√†ng", "S·ªë ƒëi·ªán tho·∫°i", "ƒê·ªãa ch·ªâ"};
        this.customerModel = new DefaultTableModel(customerColumns, 0);
        this.customerTable = new JTable(customerModel);

        // Kh·ªüi t·∫°o Nh√¢n vi√™n
        String[] employeeColumns = {"Username", "H·ªç t√™n", "Vai tr√≤", "ƒêi·ªán tho·∫°i", "L∆∞∆°ng"};
        this.employeeModel = new DefaultTableModel(employeeColumns, 0);
        this.employeeTable = new JTable(employeeModel);

        // Kh·ªüi t·∫°o S·∫£n ph·∫©m
        String[] productColumns = {"M√£ SP", "T√™n SP", "Gi√°", "T·ªìn kho"};
        this.productModel = new DefaultTableModel(productColumns, 0);
        this.productTable = new JTable(productModel);

        this.logArea = new JTextArea();
        this.logArea.setEditable(false);

        this.tabs = new JTabbedPane();
        tabs.add("üë§ Nh√¢n vi√™n", buildEmployeePanel());
        tabs.add("üì¶ S·∫£n ph·∫©m", buildProductPanel());
        tabs.add("üìä Th·ªëng k√™", buildReportPanel());

        tabs.add("üë• Kh√°ch h√†ng", buildCustomerPanel());

        tabs.add("üìù Log h·ªá th·ªëng", buildLogPanel());

        getContentPane().add(tabs);

        // Thi·∫øt l·∫≠p JFrame
        setSize(1000, 700);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // T·∫£i d·ªØ li·ªáu ban ƒë·∫ßu (KH·∫ÆC PH·ª§C L·ªñI: C·∫ßn AdminController c√≥ c√°c ph∆∞∆°ng th·ª©c n√†y)
        controller.refreshEmployees();
        controller.refreshCustomers();
    }

    // ===================== X√ÇY D·ª∞NG GIAO DI·ªÜN C√ÅC PANELS =====================
    private JPanel buildEmployeePanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.add(new JScrollPane(employeeTable), BorderLayout.CENTER);

        JPanel btnPanel = new JPanel();
        JButton btnRefresh = new JButton("L√†m m·ªõi");
        // KH·∫ÆC PH·ª§C L·ªñI: G·ªçi ph∆∞∆°ng th·ª©c trong Controller
        btnRefresh.addActionListener(e -> controller.refreshEmployees());
        btnPanel.add(btnRefresh);
        panel.add(btnPanel, BorderLayout.SOUTH);

        return panel;
    }

    // KH·∫ÆC PH·ª§C L·ªñI: ƒê·∫£m b·∫£o c√≥ return JPanel
    private JPanel buildProductPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.add(new JScrollPane(productTable), BorderLayout.CENTER);
        return panel;
    }

    // KH·∫ÆC PH·ª§C L·ªñI: ƒê·∫£m b·∫£o c√≥ return JPanel
    private JPanel buildReportPanel() {
        return new JPanel();
    }

    private JPanel buildLogPanel() {
        JPanel panel = new JPanel(new BorderLayout()); // Kh·ªüi t·∫°o JPanel
        panel.add(new JScrollPane(logArea), BorderLayout.CENTER); // G·ªçi h√†m add() (void)
        return panel; // Tr·∫£ v·ªÅ JPanel ƒë√£ ƒë∆∞·ª£c th√™m th√†nh ph·∫ßn (ƒê√öNG)
    }

    private JPanel buildCustomerPanel() {
        JPanel panel = new JPanel(new BorderLayout(10, 10));

        JScrollPane scroll = new JScrollPane(customerTable);
        panel.add(scroll, BorderLayout.CENTER);

        JPanel btnPanel = new JPanel();
        JButton btnAdd = new JButton("‚ûï Th√™m kh√°ch");
        JButton btnDelete = new JButton("‚ùå X√≥a");
        JButton btnRefresh = new JButton("üîÑ L√†m m·ªõi");

        btnPanel.add(btnAdd);
        btnPanel.add(btnDelete);
        btnPanel.add(btnRefresh);

        // G·∫Øn s·ª± ki·ªán v√†o Controller (KH·∫ÆC PH·ª§C L·ªñI: C·∫ßn AdminController c√≥ c√°c ph∆∞∆°ng th·ª©c n√†y)
        btnAdd.addActionListener(e -> controller.addCustomer());
        btnDelete.addActionListener(e -> controller.deleteCustomer());
        btnRefresh.addActionListener(e -> controller.refreshCustomers());

        panel.add(btnPanel, BorderLayout.SOUTH);
        return panel;
    }

    // ===================== PH∆Ø∆†NG TH·ª®C C·∫¨P NH·∫¨T VIEW =====================
    public void updateCustomers(List<Map<String, Object>> customers) {
        customerModel.setRowCount(0);
        if (customers != null) {
            for (Map<String, Object> cust : customers) {
                customerModel.addRow(new Object[]{
                    cust.get("id"),
                    cust.get("name"),
                    cust.get("phone"),
                    cust.get("address")
                });
            }
        }
    }

    public void updateEmployees(List<Map<String, Object>> employees) {
        employeeModel.setRowCount(0);
        if (employees != null) {
            for (Map<String, Object> emp : employees) {
                employeeModel.addRow(new Object[]{
                    emp.get("username"),
                    emp.get("fullname"),
                    emp.get("role"),
                    emp.get("phone"),
                    emp.get("salary")
                });
            }
        }
    }

    public void updateLog(String msg) {
        logArea.append(msg + "\n");
    }

    public void updateProducts(List<Map<String, Object>> products) {
        // C·∫ßn th√™m logic c·∫≠p nh·∫≠t s·∫£n ph·∫©m n·∫øu mu·ªën d√πng
    }

    // ===================== GETTERS (CHO CONTROLLER TRUY C·∫¨P) =====================
    public DefaultTableModel getCustomerTableModel() {
        return customerModel;
    }

    public JTable getCustomerTable() {
        return customerTable;
    }

    public void showMessage(String message, int messageType) {
        JOptionPane.showMessageDialog(this, message, "Th√¥ng b√°o", messageType);
    }
}
